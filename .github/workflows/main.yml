name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm cache clean --force
          rm -rf node_modules package-lock.json
          npm install

      - name: Build
        run: npm run build

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: built-app
          path: |
            .next/
            public/
            app/
            Dockerfile
            docker-compose.yml
            traefik/
            deploy.sh

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && needs.build.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: built-app
          path: .

      - name: Install sshpass and rsync
        run: sudo apt-get install -y sshpass rsync

      - name: Add SSH key to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      - name: Set permissions on the server
        run: |
          echo ${{ secrets.DEPLOY_PASSWORD }} | sshpass -p ${{ secrets.DEPLOY_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} 'echo ${{ secrets.DEPLOY_PASSWORD }} | sudo -S chown -R ${{ secrets.DEPLOY_USER }}:www-data /var/www/periculumai && echo ${{ secrets.DEPLOY_PASSWORD }} | sudo -S chmod -R 775 /var/www/periculumai'

      - name: Deploy to server
        run: |
          # Variables
          LOCAL_PROJECT_PATH="$(pwd)"
          REMOTE_USER="${{ secrets.DEPLOY_USER }}"
          REMOTE_HOST="${{ secrets.DEPLOY_HOST }}"
          REMOTE_PROJECT_PATH="/var/www/periculumai"
          SSH_PASS="${{ secrets.DEPLOY_PASSWORD }}"
          
          # Sync files to the server using rsync with increased verbosity and timeout
          echo "Starting rsync..."
          sshpass -p $SSH_PASS rsync -avz --timeout=600 --delete --exclude='.git' --exclude='node_modules' --no-perms --omit-dir-times $LOCAL_PROJECT_PATH/ $REMOTE_USER@$REMOTE_HOST:$REMOTE_PROJECT_PATH
          echo "rsync completed."
          
          # Connect to the server to deploy using Docker
          echo "Connecting to server to deploy with Docker..."
          sshpass -p $SSH_PASS ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST << EOF
            cd $REMOTE_PROJECT_PATH
            
            # Make deploy script executable
            chmod +x deploy.sh
            
            # Create necessary directories
            mkdir -p traefik/acme
            mkdir -p traefik/config
            
            # Ensure acme.json has correct permissions
            touch traefik/acme/acme.json
            chmod 600 traefik/acme/acme.json
            
            # Build and start Docker containers
            docker-compose down || true
            docker-compose build --no-cache
            docker-compose up -d
            
            # Check if containers are running
            docker-compose ps
            
            echo "Docker deployment completed successfully."
          EOF

      - name: Completed deployment message
        run: echo "Deployed app to server using Docker"
